[
[
  {
    "id": "cisco-aci-mcp",
    "name": "CISCO ACI MCP",
    "description": "MCP (Model Context Protocol) for Cisco APIC\nThis project provides a simple MCP (Model Context Protocol) server that interacts with a Cisco APIC controller. If you'd like to understand how this works in detail, please check out this blog post\n\nTested with Claude Desktop and Visual Studio Code in Agent mode with Copilot.\nThe server runs in STDIO mode, intended for local execution.",
    "author": "cpaggen",
    "repository": "https://github.com/datacenter/MCP_server_for_Cisco_ACI",
    "documentation": "https://github.com/datacenter/MCP_server_for_Cisco_ACI/blob/master/README.md",
    "tags": [
      "cisco",
      "aci",
      "mcp",
      "network"
    ],
    "category": "other",
    "language": "python",
    "complexity": "intermediate",
    "installCommand": "",
    "configExample": "{\n  \"servers\": {\n    \"ciscoApicServer\": {\n      \"type\": \"stdio\",\n      \"command\": \"C:\\\\Users\\\\cpaggen\\\\.local\\\\bin\\\\uv.EXE\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"mcp\",\n        \"run\",\n        \"C:\\\\MCP\\\\app\\\\main.py\"\n      ]\n    }\n  }\n}",
    "features": [
      "Exposes two tools for APIC interaction (see app/main.py for details). ",
      "Easily configurable via environment variables."
    ],
    "lastUpdated": "2025-08-30",
    "stars": 0
  },
  {
    "id": "netbox-mcp-server",
    "name": "NetBox MCP Server",
    "description": "This is a simple read-only Model Context Protocol server for NetBox. It enables you to interact with your data in NetBox directly via LLMs that support MCP.",
    "author": "arthanson",
    "repository": "https://github.com/netboxlabs/netbox-mcp-server",
    "documentation": "https://github.com/netboxlabs/netbox-mcp-server/blob/main/README.md",
    "tags": [
      "netbox",
      "sot"
    ],
    "category": "other",
    "language": "python",
    "complexity": "beginner",
    "installCommand": "git clone https://github.com/netboxlabs/netbox-mcp-server.git",
    "configExample": "{\n  \"mcpServers\": {\n    \"netbox\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/netbox-mcp-server\",\n        \"run\",\n        \"server.py\"\n      ],\n      \"env\": {\n        \"NETBOX_URL\": \"https://netbox.example.com/\",\n        \"NETBOX_TOKEN\": \"<your-api-token>\"\n      }\n    }\n  }\n}",
    "features": [
      "get_objects\tRetrieves NetBox core objects based on their type and filters",
      "get_object_by_id\tGets detailed information about a specific NetBox object by its ID",
      "get_changelogs\tRetrieves change history records (audit trail) based on filters"
    ],
    "lastUpdated": "2025-09-01",
    "stars": 0
  },
  {
    "id": "gnmibuddy",
    "name": "gNMIBuddy",
    "description": "An over-engineered and opinionated tool that retrieves essential network information from devices using gNMI and OpenConfig models. Designed primarily for LLMs with Model Context Protocol (MCP) integration, it also provides a full CLI for direct use.",
    "author": "Jesus Illescas",
    "repository": "https://github.com/jillesca/gNMIBuddy",
    "documentation": "https://github.com/jillesca/gNMIBuddy",
    "tags": [
      "OpenConfig",
      "gNMI",
      "uv"
    ],
    "category": "network",
    "language": "python",
    "complexity": "advanced",
    "installCommand": "git clone https://github.com/jillesca/gNMIBuddy.git && cd gNMIBuddy && uv sync --frozen --no-dev",
    "configExample": "[\n  {\n    \"name\": \"xrd-1\",\n    \"ip_address\": \"10.10.20.101\",\n    \"nos\": \"iosxr\",\n    \"username\": \"cisco\",\n    \"password\": \"C1sco12345\"\n  },\n  {\n    \"name\": \"xrd-2\",\n    \"ip_address\": \"10.10.20.102\",\n    \"nos\": \"iosxr\",\n    \"path_cert\": \"/opt/certs/device.pem\",\n    \"path_key\": \"/opt/certs/device.key\"\n  }\n]",
    "features": [
      "Routing: BGP, ISIS protocols and neighbor states",
      "Interfaces: Status, configuration, and statistics",
      "MPLS: Labels, forwarding tables, and segment routing",
      "VPN/VRF: L3VPN configuration and route targets",
      "Logs: Filtered device logs with keyword search",
      "Topology: Device neighbors and network-wide topology analysis"
    ],
    "lastUpdated": "2025-09-03",
    "stars": 0
  },
  {
    "id": "infrahub-mcp",
    "name": "Infrahub MCP",
    "description": "Infrahub MCP Server connects your AI assistants to Infrahub using the open MCP standardâ€”so agents can read and (optionally) change your infra state through a consistent, audited, human-approved interface.",
    "author": "Opsmill",
    "repository": "https://github.com/opsmill/infrahub-mcp",
    "documentation": "",
    "tags": [
      "network",
      "sot",
      "mcp",
      "infrastructure",
      "ipam",
      "dcim"
    ],
    "category": "network",
    "language": "python",
    "complexity": "beginner",
    "installCommand": "uv run fastmcp run src/infrahub_mcp/server.py:mcp",
    "configExample": "",
    "features": [
      "List all schema nodes and generics available in Infrahub.",
      "Retrieve the full schema for a specific kind (attributes, relationships, and types).",
      "Get all objects of a specific kind from Infrahub.",
      "Retrieve related nodes by relation name for a given kind.",
      "Retrieve all branches from Infrahub.",
      "Execute a GraphQL operation against Infrahub."
    ],
    "lastUpdated": "2025-09-03",
    "stars": 0
  }
]
]
